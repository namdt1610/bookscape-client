{"version":3,"file":"User-DiMBuJt3.js","sources":["../../src/admin/pages/users/User.tsx"],"sourcesContent":["import React, { useEffect, useState, useMemo, useCallback } from 'react'\r\nimport { useNavigate, Link } from 'react-router-dom'\r\nimport { User } from '../../../interfaces/User'\r\nimport useUserActions from '../../../hooks/User/useUserActions'\r\nimport { Button, Space, Badge, Input, Table, Modal, Card } from 'antd/lib'\r\nimport { ColumnsType } from 'antd/lib/table'\r\nimport { ReloadOutlined, PlusOutlined, ImportOutlined } from '@ant-design/icons'\r\nimport { debounce } from 'lodash'\r\n\r\nexport default function Users() {\r\n    const { fetchUsers } = useUserActions()\r\n    const navigate = useNavigate()\r\n    const [users, setUsers] = useState<User[]>([])\r\n    const [filteredData, setFilteredData] = useState<User[]>([])\r\n\r\n    const getUsers = async () => {\r\n        const response = await fetchUsers()\r\n        setUsers(response.map((user: User) => ({ ...user, key: user._id })))\r\n        setFilteredData(response)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUsers()\r\n    }, [])\r\n\r\n    interface ActionRecord extends User {\r\n        _id: string\r\n    }\r\n\r\n    const renderActions = useCallback(\r\n        (_: unknown, record: ActionRecord): JSX.Element => (\r\n            <Space size={'middle'} wrap>\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                    className=\"btn-border btn-hover\"\r\n                    onClick={() => handleView(record._id)}\r\n                >\r\n                    Xem\r\n                </Button>\r\n                <Button\r\n                    color=\"danger\"\r\n                    variant=\"outlined\"\r\n                    className=\"btn-border btn-hover\"\r\n                    onClick={() => handleDelete(record._id)}\r\n                >\r\n                    Xóa\r\n                </Button>\r\n            </Space>\r\n        ),\r\n        []\r\n    )\r\n\r\n    const columns: ColumnsType<User> = useMemo(\r\n        () => [\r\n            {\r\n                title: 'Avatar',\r\n                dataIndex: 'avatar',\r\n                key: 'avatar',\r\n                render: (avatar) => (\r\n                    <img\r\n                        src={\r\n                            avatar\r\n                                ? `http://localhost:8888/${avatar}`\r\n                                : '/img/meerkat.png'\r\n                        }\r\n                        alt=\"Avatar\"\r\n                        className=\"w-20 h-20 rounded-full object-cover\"\r\n                        loading=\"lazy\"\r\n                    />\r\n                ),\r\n            },\r\n            {\r\n                title: 'Name',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                sorter: (a, b) => (a.name ?? '').localeCompare(b.name ?? ''),\r\n                render: (_, { name, _id }) => (\r\n                    <Link to={`/admin/users/${_id}`}>{name}</Link>\r\n                ),\r\n            },\r\n            // {\r\n            //     title: 'Role',\r\n            //     dataIndex: 'role',\r\n            //     key: 'role',\r\n            //     render: (_, { role }) => {\r\n            //         let color = role === 'admin' ? 'red' : 'green'\r\n            //         return (\r\n            //             <Tag color={color} key={role}>\r\n            //                 {role.toUpperCase()}\r\n            //             </Tag>\r\n            //         )\r\n            //     },\r\n            //     sorter: (a, b) => a.role.localeCompare(b.role),\r\n            // },\r\n            {\r\n                title: 'Email',\r\n                dataIndex: 'email',\r\n                key: 'email',\r\n                sorter: (a, b) => a.email.localeCompare(b.email),\r\n            },\r\n            {\r\n                title: 'Phone',\r\n                dataIndex: 'phone',\r\n                key: 'phone',\r\n                sorter: (a, b) => (a.phone ?? '').localeCompare(b.phone ?? ''),\r\n            },\r\n            {\r\n                title: 'Status',\r\n                dataIndex: 'status',\r\n                key: 'status',\r\n                render: (status) => (\r\n                    <Badge\r\n                        className=\"capitalize\"\r\n                        status=\"processing\"\r\n                        color={status === 'active' ? 'green' : 'red'}\r\n                        text={status}\r\n                    ></Badge>\r\n                ),\r\n                sorter: (a, b) => a.status.localeCompare(b.status),\r\n            },\r\n            {\r\n                title: 'Action',\r\n                key: 'action',\r\n                render: renderActions,\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const handleView = (id: string) => {\r\n        navigate(`/admin/users/${id}`)\r\n    }\r\n\r\n    const handleDelete = (userId: string) => {\r\n        Modal.confirm({\r\n            title: 'Are you sure?',\r\n            content: 'Do you really want to delete this user?',\r\n            okText: 'Yes',\r\n            cancelText: 'No',\r\n            onOk: () => {\r\n                console.log('Delete user ID:', userId)\r\n            },\r\n        })\r\n    }\r\n\r\n    const onSearch = useMemo(\r\n        () =>\r\n            debounce((value: string) => {\r\n                const lowercasedValue = value.toLowerCase()\r\n                if (value === '') {\r\n                    setFilteredData(users)\r\n                } else {\r\n                    const filtered = users.filter((user) =>\r\n                        ['name', 'email', 'role', 'phone', 'status'].some(\r\n                            (key) =>\r\n                                user[key]\r\n                                    ?.toLowerCase()\r\n                                    .includes(lowercasedValue)\r\n                        )\r\n                    )\r\n                    setFilteredData(filtered)\r\n                }\r\n            }, 300),\r\n        [users]\r\n    )\r\n\r\n    const { Search } = Input\r\n\r\n    return (\r\n        <>\r\n            <Card className=\"my-6 card-border\">\r\n                <Space size={'middle'} wrap>\r\n                    <Link to={'/admin/register'}>\r\n                        <Button\r\n                            size=\"large\"\r\n                            className=\"btn-border btn-hover\"\r\n                            icon={<PlusOutlined />}\r\n                        >\r\n                            New\r\n                        </Button>\r\n                    </Link>\r\n                    <Button\r\n                        size=\"large\"\r\n                        className=\"btn-border btn-hover\"\r\n                        icon={<ImportOutlined />}\r\n                    >\r\n                        Import\r\n                    </Button>\r\n                    <Button\r\n                        size=\"large\"\r\n                        className=\"btn-border btn-hover\"\r\n                        onClick={() => getUsers()}\r\n                        icon={<ReloadOutlined />}\r\n                    >\r\n                        Refresh\r\n                    </Button>\r\n                    <Search\r\n                        size=\"large\"\r\n                        placeholder=\"input search text\"\r\n                        allowClear\r\n                        onSearch={onSearch}\r\n                        style={{ width: 'auto' }}\r\n                    />\r\n                </Space>\r\n            </Card>\r\n            <Card\r\n                className=\"card-border\"\r\n                title={'User Management'}\r\n                color=\"#f3f3f3\"\r\n            >\r\n                <Table\r\n                    size=\"large\"\r\n                    tableLayout=\"fixed\"\r\n                    rowClassName={'cursor-pointer'}\r\n                    className=\"border-black border rounded-lg\"\r\n                    dataSource={filteredData}\r\n                    columns={columns}\r\n                    locale={{\r\n                        emptyText:\r\n                            filteredData.length === 0\r\n                                ? 'Không có từ khóa trùng khớp'\r\n                                : 'Không có dữ liệu',\r\n                    }}\r\n                />\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n"],"names":["Users","fetchUsers","useUserActions","navigate","useNavigate","users","setUsers","useState","filteredData","setFilteredData","getUsers","response","user","useEffect","renderActions","useCallback","_","record","jsxs","Space","jsx","Button","handleView","handleDelete","columns","useMemo","avatar","a","b","name","_id","Link","status","Badge","id","userId","Modal","onSearch","debounce","value","lowercasedValue","filtered","key","_a","Search","Input","Fragment","Card","PlusOutlined","ImportOutlined","ReloadOutlined","Table"],"mappings":"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"}