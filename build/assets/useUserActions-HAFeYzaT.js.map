{"version":3,"file":"useUserActions-HAFeYzaT.js","sources":["../../src/contexts/UserContext.tsx","../../src/api/userApi.ts","../../src/hooks/User/useUserActions.ts"],"sourcesContent":["import React, { createContext, useReducer, ReactNode, Dispatch } from 'react'\r\nimport { User } from '../interfaces/User'\r\n\r\nexport interface State {\r\n    users: User[]\r\n}\r\n\r\nexport interface Action {\r\n    type:\r\n        | 'SET_USERS'\r\n        | 'CREATE_USER'\r\n        | 'GET_USER'\r\n        | 'UPDATE_USER'\r\n        | 'DELETE_USER'\r\n    payload: any\r\n}\r\n\r\nconst initialState: State = {\r\n    users: [],\r\n}\r\n\r\nexport const UserContext = createContext<{\r\n    state: State\r\n    dispatch: Dispatch<Action>\r\n}>({\r\n    state: initialState,\r\n    dispatch: () => null,\r\n})\r\n\r\nexport const userReducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.payload,\r\n            }\r\n        case 'CREATE_USER':\r\n            return {\r\n                ...state,\r\n                users: [action.payload, ...state.users],\r\n            }\r\n        case 'GET_USER':\r\n            return {\r\n                ...state,\r\n                users: action.payload,\r\n            }\r\n        case 'UPDATE_USER':\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) =>\r\n                    u._id === action.payload._id ? action.payload : u\r\n                ),\r\n            }\r\n        case 'DELETE_USER':\r\n            return {\r\n                ...state,\r\n                users: state.users.filter((u) => u._id !== action.payload._id),\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ninterface UserContextProviderProps {\r\n    children: ReactNode\r\n}\r\n\r\nexport const UserContextProvider: React.FC<UserContextProviderProps> = ({\r\n    children,\r\n}) => {\r\n    const [state, dispatch] = useReducer(userReducer, initialState)\r\n\r\n    return (\r\n        <UserContext.Provider value={{ state, dispatch }}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    )\r\n}\r\n","// userApi.ts\r\nimport axiosInstance from './axiosInstance'\r\nimport { userApi } from './apiConfig'\r\nimport { User } from '../interfaces/User'\r\n\r\nexport const fetchUsersApi = async () => {\r\n    try {\r\n        const response = await axiosInstance.get(userApi.base)\r\n        return response.data\r\n    } catch (error) {\r\n        console.error('Lỗi khi lấy user:', error)\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const fetchUserByIdApi = async (id: string) => {\r\n    if (!id) throw new Error('ID không hợp lệ')\r\n    try {\r\n        const response = await axiosInstance.get(userApi.getById(id))\r\n        return response.data\r\n    } catch (error) {\r\n        console.error(`Lỗi khi lấy user với ID ${id}:`, error)\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const createUserApi = async (userData) => {\r\n    try {\r\n        const response = await axiosInstance.post(userApi.base, userData)\r\n        return response.data\r\n    } catch (error) {\r\n        console.error('Lỗi khi tạo user mới:', error)\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const updateUserApi = async (\r\n    id: string,\r\n    updatedData: FormData\r\n): Promise<User> => {\r\n    if (!id) throw new Error('ID không hợp lệ')\r\n    try {\r\n        const response = await axiosInstance.put(\r\n            userApi.getById(id),\r\n            updatedData,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                },\r\n            }\r\n        )\r\n        return response.data\r\n    } catch (error) {\r\n        console.error(`Lỗi khi cập nhật user với ID ${id}:`, error)\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const deleteUserApi = async (id: string) => {\r\n    if (!id) throw new Error('Invalid ID')\r\n    try {\r\n        console.log('id', id)\r\n        const response = await axiosInstance.delete(userApi.getById(id))\r\n        return response.data\r\n    } catch (error) {\r\n        console.error(`Lỗi khi xóa user với ID ${id}:`, error)\r\n        throw error\r\n    }\r\n}\r\n","import { useContext } from 'react'\r\nimport { UserContext } from '../../contexts/UserContext'\r\nimport {\r\n    fetchUsersApi,\r\n    fetchUserByIdApi,\r\n    deleteUserApi,\r\n    createUserApi,\r\n    updateUserApi,\r\n} from '../../api/userApi'\r\n\r\nconst useUserActions = () => {\r\n    const { dispatch } = useContext(UserContext)\r\n\r\n    type ActionType =\r\n        | 'SET_USERS'\r\n        | 'CREATE_USER'\r\n        | 'GET_USER'\r\n        | 'UPDATE_USER'\r\n        | 'DELETE_USER'\r\n\r\n    const apiRequest = async (\r\n        apiFunc: Function,\r\n        actionType: ActionType,\r\n        payload?: any\r\n    ) => {\r\n        try {\r\n            const data = await apiFunc(payload)\r\n            dispatch({ type: actionType, payload: data })\r\n            return data\r\n        } catch (error) {\r\n            console.error(`Error during ${actionType}:`, error)\r\n            throw error // Optional: throw error if you want to handle it in the calling component\r\n        }\r\n    }\r\n\r\n    const fetchUsers = async () => apiRequest(fetchUsersApi, 'SET_USERS')\r\n\r\n    const fetchUserById = async (id: string) =>\r\n        apiRequest(() => fetchUserByIdApi(id), 'GET_USER')\r\n\r\n    const deleteUser = async (id: string) =>\r\n        apiRequest(() => deleteUserApi(id), 'DELETE_USER')\r\n\r\n    const createUser = async (userData: object) =>\r\n        apiRequest(() => createUserApi(userData), 'CREATE_USER')\r\n\r\n    const updateUser = async (id: string, updatedData: FormData) =>\r\n        apiRequest(() => updateUserApi(id, updatedData), 'UPDATE_USER')\r\n\r\n    return {\r\n        fetchUsers,\r\n        fetchUserById,\r\n        deleteUser,\r\n        createUser,\r\n        updateUser,\r\n    }\r\n}\r\n\r\nexport default useUserActions\r\n"],"names":["initialState","UserContext","createContext","fetchUsersApi","axiosInstance","userApi","error","fetchUserByIdApi","id","createUserApi","userData","updateUserApi","updatedData","deleteUserApi","useUserActions","dispatch","useContext","apiRequest","apiFunc","actionType","payload","data"],"mappings":"wDAiBA,MAAMA,EAAsB,CACxB,MAAO,CAAC,CACZ,EAEaC,EAAcC,EAAAA,cAGxB,CACC,MAAOF,EACP,SAAU,IAAM,IACpB,CAAC,ECtBYG,EAAgB,SAAY,CACjC,GAAA,CAEA,OADiB,MAAMC,EAAc,IAAIC,EAAQ,IAAI,GACrC,WACXC,EAAO,CACJ,cAAA,MAAM,oBAAqBA,CAAK,EAClCA,CACV,CACJ,EAEaC,EAAmB,MAAOC,GAAe,CAClD,GAAI,CAACA,EAAU,MAAA,IAAI,MAAM,iBAAiB,EACtC,GAAA,CAEA,OADiB,MAAMJ,EAAc,IAAIC,EAAQ,QAAQG,CAAE,CAAC,GAC5C,WACXF,EAAO,CACZ,cAAQ,MAAM,2BAA2BE,CAAE,IAAKF,CAAK,EAC/CA,CACV,CACJ,EAEaG,EAAgB,MAAOC,GAAa,CACzC,GAAA,CAEA,OADiB,MAAMN,EAAc,KAAKC,EAAQ,KAAMK,CAAQ,GAChD,WACXJ,EAAO,CACJ,cAAA,MAAM,wBAAyBA,CAAK,EACtCA,CACV,CACJ,EAEaK,EAAgB,MACzBH,EACAI,IACgB,CAChB,GAAI,CAACJ,EAAU,MAAA,IAAI,MAAM,iBAAiB,EACtC,GAAA,CAUA,OATiB,MAAMJ,EAAc,IACjCC,EAAQ,QAAQG,CAAE,EAClBI,EACA,CACI,QAAS,CACL,eAAgB,qBACpB,CACJ,CAAA,GAEY,WACXN,EAAO,CACZ,cAAQ,MAAM,gCAAgCE,CAAE,IAAKF,CAAK,EACpDA,CACV,CACJ,EAEaO,EAAgB,MAAOL,GAAe,CAC/C,GAAI,CAACA,EAAU,MAAA,IAAI,MAAM,YAAY,EACjC,GAAA,CACQ,eAAA,IAAI,KAAMA,CAAE,GACH,MAAMJ,EAAc,OAAOC,EAAQ,QAAQG,CAAE,CAAC,GAC/C,WACXF,EAAO,CACZ,cAAQ,MAAM,2BAA2BE,CAAE,IAAKF,CAAK,EAC/CA,CACV,CACJ,EC1DMQ,EAAiB,IAAM,CACzB,KAAM,CAAE,SAAAC,CAAA,EAAaC,EAAA,WAAWf,CAAW,EASrCgB,EAAa,MACfC,EACAC,EACAC,IACC,CACG,GAAA,CACM,MAAAC,EAAO,MAAMH,EAAQE,CAAO,EAClC,OAAAL,EAAS,CAAE,KAAMI,EAAY,QAASE,CAAM,CAAA,EACrCA,QACFf,EAAO,CACZ,cAAQ,MAAM,gBAAgBa,CAAU,IAAKb,CAAK,EAC5CA,CACV,CAAA,EAiBG,MAAA,CACH,WAfe,SAAYW,EAAWd,EAAe,WAAW,EAgBhE,cAdkB,MAAOK,GACzBS,EAAW,IAAMV,EAAiBC,CAAE,EAAG,UAAU,EAcjD,WAZe,MAAOA,GACtBS,EAAW,IAAMJ,EAAcL,CAAE,EAAG,aAAa,EAYjD,WAVe,MAAOE,GACtBO,EAAW,IAAMR,EAAcC,CAAQ,EAAG,aAAa,EAUvD,WARe,MAAOF,EAAYI,IAClCK,EAAW,IAAMN,EAAcH,EAAII,CAAW,EAAG,aAAa,CAO9D,CAER"}